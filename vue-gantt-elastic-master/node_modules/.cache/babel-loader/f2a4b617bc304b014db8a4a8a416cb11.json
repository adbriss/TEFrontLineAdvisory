{"remainingRequest":"/Users/danieldanio/workspace/daniel-danio-student-code/Capstone/project-schedule-app-final-capstone/vue-gantt-elastic-master/node_modules/babel-loader/lib/index.js!/Users/danieldanio/workspace/daniel-danio-student-code/Capstone/project-schedule-app-final-capstone/vue-gantt-elastic-master/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/danieldanio/workspace/daniel-danio-student-code/Capstone/project-schedule-app-final-capstone/vue-gantt-elastic-master/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/danieldanio/workspace/daniel-danio-student-code/Capstone/project-schedule-app-final-capstone/vue-gantt-elastic-master/node_modules/gantt-elastic/src/components/Chart/ProgressBar.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/danieldanio/workspace/daniel-danio-student-code/Capstone/project-schedule-app-final-capstone/vue-gantt-elastic-master/node_modules/gantt-elastic/src/components/Chart/ProgressBar.vue","mtime":1664650536313},{"path":"/Users/danieldanio/workspace/daniel-danio-student-code/Capstone/project-schedule-app-final-capstone/vue-gantt-elastic-master/node_modules/cache-loader/dist/cjs.js","mtime":1664650533042},{"path":"/Users/danieldanio/workspace/daniel-danio-student-code/Capstone/project-schedule-app-final-capstone/vue-gantt-elastic-master/node_modules/babel-loader/lib/index.js","mtime":1664650533420},{"path":"/Users/danieldanio/workspace/daniel-danio-student-code/Capstone/project-schedule-app-final-capstone/vue-gantt-elastic-master/node_modules/cache-loader/dist/cjs.js","mtime":1664650533042},{"path":"/Users/danieldanio/workspace/daniel-danio-student-code/Capstone/project-schedule-app-final-capstone/vue-gantt-elastic-master/node_modules/vue-loader/lib/index.js","mtime":1664650526464}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  name: 'ProgressBar',\n  inject: ['root'],\n  props: ['task'],\n  data: function data() {\n    return {};\n  },\n  computed: {\n    /**\n     * Get progress width\n     *\n     * @returns {string}\n     */\n    getProgressWidth: function getProgressWidth() {\n      return this.task.progress + '%';\n    },\n\n    /**\n     * Get line points\n     *\n     * @returns {string}\n     */\n    getLinePoints: function getLinePoints() {\n      var start = this.task.width / 100 * this.task.progress;\n      return \"M \".concat(start, \" 0 L \").concat(start, \" \").concat(this.task.height);\n    },\n\n    /**\n     * Get solid style\n     *\n     * @returns {object}\n     */\n    getSolidStyle: function getSolidStyle() {\n      return Object.assign({}, this.root.state.options.chart.progress.styles.bar.solid, this.task.progressBarStyle.bar);\n    },\n\n    /**\n     * Get line style\n     *\n     * @returns {object}\n     */\n    getLineStyle: function getLineStyle() {\n      return Object.assign({}, {\n        stroke: this.root.state.options.row.styles.bar.stroke + 'a0',\n        'stroke-width': this.root.state.options.row.styles.bar['stroke-width'] / 2\n      }, this.task.style);\n    }\n  }\n};",{"version":3,"sources":["ProgressBar.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8DA,eAAA;AACA,EAAA,IAAA,EAAA,aADA;AAEA,EAAA,MAAA,EAAA,CAAA,MAAA,CAFA;AAGA,EAAA,KAAA,EAAA,CAAA,MAAA,CAHA;AAIA,EAAA,IAJA,kBAIA;AACA,WAAA,EAAA;AACA,GANA;AAQA,EAAA,QAAA,EAAA;AACA;;;;;AAKA,IAAA,gBANA,8BAMA;AACA,aAAA,KAAA,IAAA,CAAA,QAAA,GAAA,GAAA;AACA,KARA;;AAUA;;;;;AAKA,IAAA,aAfA,2BAeA;AACA,UAAA,KAAA,GAAA,KAAA,IAAA,CAAA,KAAA,GAAA,GAAA,GAAA,KAAA,IAAA,CAAA,QAAA;AACA,yBAAA,KAAA,kBAAA,KAAA,cAAA,KAAA,IAAA,CAAA,MAAA;AACA,KAlBA;;AAoBA;;;;;AAKA,IAAA,aAzBA,2BAyBA;AACA,aAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,KAAA,IAAA,CAAA,KAAA,CAAA,OAAA,CAAA,KAAA,CAAA,QAAA,CAAA,MAAA,CAAA,GAAA,CAAA,KAAA,EAAA,KAAA,IAAA,CAAA,gBAAA,CAAA,GAAA,CAAA;AACA,KA3BA;;AA6BA;;;;;AAKA,IAAA,YAlCA,0BAkCA;AACA,aAAA,MAAA,CAAA,MAAA,CACA,EADA,EAEA;AACA,QAAA,MAAA,EAAA,KAAA,IAAA,CAAA,KAAA,CAAA,OAAA,CAAA,GAAA,CAAA,MAAA,CAAA,GAAA,CAAA,MAAA,GAAA,IADA;AAEA,wBAAA,KAAA,IAAA,CAAA,KAAA,CAAA,OAAA,CAAA,GAAA,CAAA,MAAA,CAAA,GAAA,CAAA,cAAA,IAAA;AAFA,OAFA,EAMA,KAAA,IAAA,CAAA,KANA,CAAA;AAQA;AA3CA;AARA,CAAA","sourcesContent":["<!--\n/**\n * @fileoverview ProgressBar component\n * @license MIT\n * @author Rafal Pospiech <neuronet.io@gmail.com>\n * @package GanttElastic\n */\n-->\n<template>\n  <g\n    class=\"gantt-elastic__chart-row-progress-bar-wrapper\"\n    :style=\"{ ...root.style['chart-row-progress-bar-wrapper'], ...task.style['chart-row-progress-bar-wrapper'] }\"\n  >\n    <defs>\n      <pattern\n        id=\"diagonalHatch\"\n        :width=\"root.state.options.chart.progress.width\"\n        :height=\"root.state.options.chart.progress.width\"\n        patternTransform=\"rotate(45 0 0)\"\n        patternUnits=\"userSpaceOnUse\"\n      >\n        <line\n          class=\"chart-row-progress-bar-line\"\n          :style=\"{ ...root.style['chart-row-progress-bar-line'], ...task.style['chart-row-progress-bar-line'] }\"\n          x1=\"0\"\n          y1=\"0\"\n          x2=\"0\"\n          :y2=\"root.state.options.chart.progress.width\"\n        />\n      </pattern>\n    </defs>\n    <rect\n      v-if=\"root.state.options.chart.progress.bar\"\n      class=\"gantt-elastic__chart-row-progress-bar-solid\"\n      :style=\"{ ...root.style['chart-row-progress-bar-solid'], ...task.style['chart-row-progress-bar-solid'] }\"\n      x=\"0\"\n      y=\"0\"\n      :width=\"getProgressWidth\"\n    ></rect>\n    <g v-if=\"root.state.options.chart.progress.pattern\">\n      <rect\n        class=\"gantt-elastic__chart-row-progress-bar-pattern\"\n        :style=\"{ ...root.style['chart-row-progress-bar-pattern'], ...task.style['chart-row-progress-bar-pattern'] }\"\n        :x=\"getProgressWidth\"\n        y=\"0\"\n        :width=\"100 - task.progress + '%'\"\n        height=\"100%\"\n      ></rect>\n      <path\n        class=\"gantt-elastic__chart-row-progress-bar-outline\"\n        :style=\"{\n          ...root.style['chart-row-progress-bar-outline'],\n          ...task.style['base'],\n          ...task.style['chart-row-progress-bar-outline']\n        }\"\n        :d=\"getLinePoints\"\n      ></path>\n    </g>\n  </g>\n</template>\n\n<script>\nexport default {\n  name: 'ProgressBar',\n  inject: ['root'],\n  props: ['task'],\n  data() {\n    return {};\n  },\n\n  computed: {\n    /**\n     * Get progress width\n     *\n     * @returns {string}\n     */\n    getProgressWidth() {\n      return this.task.progress + '%';\n    },\n\n    /**\n     * Get line points\n     *\n     * @returns {string}\n     */\n    getLinePoints() {\n      const start = (this.task.width / 100) * this.task.progress;\n      return `M ${start} 0 L ${start} ${this.task.height}`;\n    },\n\n    /**\n     * Get solid style\n     *\n     * @returns {object}\n     */\n    getSolidStyle() {\n      return Object.assign({}, this.root.state.options.chart.progress.styles.bar.solid, this.task.progressBarStyle.bar);\n    },\n\n    /**\n     * Get line style\n     *\n     * @returns {object}\n     */\n    getLineStyle() {\n      return Object.assign(\n        {},\n        {\n          stroke: this.root.state.options.row.styles.bar.stroke + 'a0',\n          'stroke-width': this.root.state.options.row.styles.bar['stroke-width'] / 2\n        },\n        this.task.style\n      );\n    }\n  }\n};\n</script>\n"],"sourceRoot":"node_modules/gantt-elastic/src/components/Chart"}]}