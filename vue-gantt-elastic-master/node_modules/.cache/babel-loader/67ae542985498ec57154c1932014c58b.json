{"remainingRequest":"/Users/danieldanio/workspace/daniel-danio-student-code/Capstone/project-schedule-app-final-capstone/vue-gantt-elastic-master/node_modules/babel-loader/lib/index.js!/Users/danieldanio/workspace/daniel-danio-student-code/Capstone/project-schedule-app-final-capstone/vue-gantt-elastic-master/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/danieldanio/workspace/daniel-danio-student-code/Capstone/project-schedule-app-final-capstone/vue-gantt-elastic-master/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/danieldanio/workspace/daniel-danio-student-code/Capstone/project-schedule-app-final-capstone/vue-gantt-elastic-master/node_modules/gantt-elastic/src/components/Calendar/Calendar.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/danieldanio/workspace/daniel-danio-student-code/Capstone/project-schedule-app-final-capstone/vue-gantt-elastic-master/node_modules/gantt-elastic/src/components/Calendar/Calendar.vue","mtime":1664650536309},{"path":"/Users/danieldanio/workspace/daniel-danio-student-code/Capstone/project-schedule-app-final-capstone/vue-gantt-elastic-master/node_modules/cache-loader/dist/cjs.js","mtime":1664650533042},{"path":"/Users/danieldanio/workspace/daniel-danio-student-code/Capstone/project-schedule-app-final-capstone/vue-gantt-elastic-master/node_modules/babel-loader/lib/index.js","mtime":1664650533420},{"path":"/Users/danieldanio/workspace/daniel-danio-student-code/Capstone/project-schedule-app-final-capstone/vue-gantt-elastic-master/node_modules/cache-loader/dist/cjs.js","mtime":1664650533042},{"path":"/Users/danieldanio/workspace/daniel-danio-student-code/Capstone/project-schedule-app-final-capstone/vue-gantt-elastic-master/node_modules/vue-loader/lib/index.js","mtime":1664650526464}],"contextDependencies":[],"result":["import \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/es6.number.max-safe-integer\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport dayjs from 'dayjs';\nimport CalendarRow from \"./CalendarRow.vue\";\nexport default {\n  name: 'Calendar',\n  components: {\n    CalendarRow: CalendarRow\n  },\n  inject: ['root'],\n  data: function data() {\n    return {};\n  },\n  methods: {\n    /**\n     * How many hours will fit?\n     *\n     * @returns {object}\n     */\n    howManyHoursFit: function howManyHoursFit(dayIndex) {\n      var stroke = 1;\n      var additionalSpace = stroke + 2;\n      var fullCellWidth = this.root.state.options.times.steps[dayIndex].width.px;\n      var formatNames = Object.keys(this.root.state.options.calendar.hour.format);\n\n      for (var hours = 24; hours > 1; hours = Math.ceil(hours / 2)) {\n        for (var _i = 0, _formatNames = formatNames; _i < _formatNames.length; _i++) {\n          var formatName = _formatNames[_i];\n\n          if ((this.root.state.options.calendar.hour.maxWidths[formatName] + additionalSpace) * hours <= fullCellWidth && hours > 1) {\n            return {\n              count: hours,\n              type: formatName\n            };\n          }\n        }\n      }\n\n      return {\n        count: 0,\n        type: ''\n      };\n    },\n\n    /**\n     * How many days will fit?\n     *\n     * @returns {object}\n     */\n    howManyDaysFit: function howManyDaysFit() {\n      var stroke = 1;\n      var additionalSpace = stroke + 2;\n      var fullWidth = this.root.state.options.width;\n      var formatNames = Object.keys(this.root.state.options.calendar.day.format);\n\n      for (var days = this.root.state.options.times.steps.length; days > 1; days = Math.ceil(days / 2)) {\n        for (var _i2 = 0, _formatNames2 = formatNames; _i2 < _formatNames2.length; _i2++) {\n          var formatName = _formatNames2[_i2];\n\n          if ((this.root.state.options.calendar.day.maxWidths[formatName] + additionalSpace) * days <= fullWidth && days > 1) {\n            return {\n              count: days,\n              type: formatName\n            };\n          }\n        }\n      }\n\n      return {\n        count: 0,\n        type: ''\n      };\n    },\n\n    /**\n     * How many months will fit?\n     *\n     * @returns {object}\n     */\n    howManyMonthsFit: function howManyMonthsFit() {\n      var stroke = 1;\n      var additionalSpace = stroke + 2;\n      var fullWidth = this.root.state.options.width;\n      var formatNames = Object.keys(this.root.state.options.calendar.month.format);\n      var currentMonth = dayjs(this.root.state.options.times.firstTime);\n      var previousMonth = currentMonth.clone();\n      var lastTime = this.root.state.options.times.lastTime;\n      var monthsCount = this.root.monthsCount(this.root.state.options.times.firstTime, this.root.state.options.times.lastTime);\n\n      if (monthsCount === 1) {\n        for (var _i3 = 0, _formatNames3 = formatNames; _i3 < _formatNames3.length; _i3++) {\n          var formatName = _formatNames3[_i3];\n\n          if (this.root.state.options.calendar.month.maxWidths[formatName] + additionalSpace <= fullWidth) {\n            return {\n              count: 1,\n              type: formatName\n            };\n          }\n        }\n      }\n\n      for (var months = monthsCount; months > 1; months = Math.ceil(months / 2)) {\n        for (var _i4 = 0, _formatNames4 = formatNames; _i4 < _formatNames4.length; _i4++) {\n          var _formatName = _formatNames4[_i4];\n\n          if ((this.root.state.options.calendar.month.maxWidths[_formatName] + additionalSpace) * months <= fullWidth && months > 1) {\n            return {\n              count: months,\n              type: _formatName\n            };\n          }\n        }\n      }\n\n      return {\n        count: 0,\n        type: formatNames[0]\n      };\n    },\n\n    /**\n     * Generate hours\n     *\n     * @returns {array}\n     */\n    generateHours: function generateHours() {\n      var allHours = [];\n\n      if (!this.root.state.options.calendar.hour.display) {\n        return allHours;\n      }\n\n      var steps = this.root.state.options.times.steps;\n      var localeName = this.root.state.options.locale.name;\n\n      for (var hourIndex = 0, len = steps.length; hourIndex < len; hourIndex++) {\n        var hoursCount = this.howManyHoursFit(hourIndex);\n\n        if (hoursCount.count === 0) {\n          continue;\n        }\n\n        var hours = {\n          key: hourIndex + 'step',\n          children: []\n        };\n        var hourStep = 24 / hoursCount.count;\n        var hourWidthPx = steps[hourIndex].width.px / hoursCount.count;\n\n        for (var i = 0, _len = hoursCount.count; i < _len; i++) {\n          var hour = i * hourStep;\n          var index = hourIndex;\n\n          if (hourIndex > 0) {\n            index = hourIndex - Math.floor(hourIndex / 24) * 24;\n          }\n\n          var textWidth = 0;\n\n          if (typeof this.root.state.options.calendar.hour.widths[index] !== 'undefined') {\n            textWidth = this.root.state.options.calendar.hour.widths[index][hoursCount.type];\n          }\n\n          var x = steps[hourIndex].offset.px + hourWidthPx * i;\n          hours.children.push({\n            index: hourIndex,\n            key: 'h' + i,\n            x: x,\n            y: this.root.state.options.calendar.day.height + this.root.state.options.calendar.month.height,\n            width: hourWidthPx,\n            textWidth: textWidth,\n            height: this.root.state.options.calendar.hour.height,\n            label: this.root.state.options.calendar.hour.formatted[hoursCount.type][hour]\n          });\n        }\n\n        allHours.push(hours);\n      }\n\n      return allHours;\n    },\n\n    /**\n     * Generate days\n     *\n     * @returns {array}\n     */\n    generateDays: function generateDays() {\n      var days = [];\n\n      if (!this.root.state.options.calendar.day.display) {\n        return days;\n      }\n\n      var daysCount = this.howManyDaysFit();\n\n      if (daysCount.count === 0) {\n        return days;\n      }\n\n      var steps = this.root.state.options.times.steps;\n      var localeName = this.root.state.options.locale.name;\n      var dayStep = Math.ceil(steps.length / daysCount.count);\n\n      for (var dayIndex = 0, len = steps.length; dayIndex < len; dayIndex += dayStep) {\n        var dayWidthPx = 0; // day could be shorter (daylight saving time) so join widths and divide\n\n        for (var currentStep = 0; currentStep < dayStep; currentStep++) {\n          if (typeof steps[dayIndex + currentStep] !== 'undefined') {\n            dayWidthPx += steps[dayIndex + currentStep].width.px;\n          }\n        }\n\n        var date = dayjs(steps[dayIndex].time);\n        var textWidth = 0;\n\n        if (typeof this.root.state.options.calendar.day.widths[dayIndex] !== 'undefined') {\n          textWidth = this.root.state.options.calendar.day.widths[dayIndex][daysCount.type];\n        }\n\n        var x = steps[dayIndex].offset.px;\n        days.push({\n          index: dayIndex,\n          key: steps[dayIndex].time + 'd',\n          x: x,\n          y: this.root.state.options.calendar.month.height,\n          width: dayWidthPx,\n          textWidth: textWidth,\n          height: this.root.state.options.calendar.day.height,\n          label: this.root.state.options.calendar.day.format[daysCount.type](date.locale(localeName))\n        });\n      }\n\n      return days.map(function (item) {\n        return {\n          key: item.key,\n          children: [item]\n        };\n      });\n    },\n\n    /**\n     * Generate months\n     *\n     * @returns {array}\n     */\n    generateMonths: function generateMonths() {\n      var months = [];\n\n      if (!this.root.state.options.calendar.month.display) {\n        return months;\n      }\n\n      var monthsCount = this.howManyMonthsFit();\n\n      if (monthsCount.count === 0) {\n        return months;\n      }\n\n      var steps = this.root.state.options.times.steps;\n      var localeName = this.root.state.options.locale.name;\n      var formatNames = Object.keys(this.root.state.options.calendar.month.format);\n      var currentDate = dayjs(this.root.state.options.times.firstTime);\n\n      for (var monthIndex = 0; monthIndex < monthsCount.count; monthIndex++) {\n        var monthWidth = 0;\n        var monthOffset = Number.MAX_SAFE_INTEGER;\n        var finalDate = dayjs(currentDate).add(1, 'month').startOf('month');\n\n        if (finalDate.valueOf() > this.root.state.options.times.lastTime) {\n          finalDate = dayjs(this.root.state.options.times.lastTime);\n        } // we must find first and last step to get the offsets / widths\n\n\n        for (var step = 0, len = this.root.state.options.times.steps.length; step < len; step++) {\n          var currentStep = this.root.state.options.times.steps[step];\n\n          if (currentStep.time >= currentDate.valueOf() && currentStep.time < finalDate.valueOf()) {\n            monthWidth += currentStep.width.px;\n\n            if (currentStep.offset.px < monthOffset) {\n              monthOffset = currentStep.offset.px;\n            }\n          }\n        }\n\n        var label = '';\n        var choosenFormatName = void 0;\n\n        for (var _i5 = 0, _formatNames5 = formatNames; _i5 < _formatNames5.length; _i5++) {\n          var formatName = _formatNames5[_i5];\n\n          if (this.root.state.options.calendar.month.maxWidths[formatName] + 2 <= monthWidth) {\n            label = this.root.state.options.calendar.month.format[formatName](currentDate.locale(localeName));\n            choosenFormatName = formatName;\n          }\n        }\n\n        var textWidth = 0;\n\n        if (typeof this.root.state.options.calendar.month.widths[monthIndex] !== 'undefined') {\n          textWidth = this.root.state.options.calendar.month.widths[monthIndex][choosenFormatName];\n        }\n\n        var x = monthOffset;\n        months.push({\n          index: monthIndex,\n          key: monthIndex + 'm',\n          x: x,\n          y: 0,\n          width: monthWidth,\n          textWidth: textWidth,\n          choosenFormatName: choosenFormatName,\n          height: this.root.state.options.calendar.month.height,\n          label: label\n        });\n        currentDate = currentDate.add(1, 'month').startOf('month');\n\n        if (currentDate.valueOf() > this.root.state.options.times.lastTime) {\n          currentDate = dayjs(this.root.state.options.times.lastTime);\n        }\n      }\n\n      return months.map(function (item) {\n        return {\n          key: item.key,\n          children: [item]\n        };\n      });\n    },\n\n    /**\n     * Sum all calendar rows height and return result\n     *\n     * @returns {int}\n     */\n    calculateCalendarDimensions: function calculateCalendarDimensions(_ref) {\n      var hours = _ref.hours,\n          days = _ref.days,\n          months = _ref.months;\n      var height = 0;\n\n      if (this.root.state.options.calendar.hour.display && hours.length > 0) {\n        height += this.root.state.options.calendar.hour.height;\n      }\n\n      if (this.root.state.options.calendar.day.display && days.length > 0) {\n        height += this.root.state.options.calendar.day.height;\n      }\n\n      if (this.root.state.options.calendar.month.display && months.length > 0) {\n        height += this.root.state.options.calendar.month.height;\n      }\n\n      this.root.state.options.calendar.height = height;\n    }\n  },\n  computed: {\n    dates: function dates() {\n      var hours = this.generateHours();\n      var days = this.generateDays();\n      var months = this.generateMonths();\n      var allDates = {\n        hours: hours,\n        days: days,\n        months: months\n      };\n      this.calculateCalendarDimensions(allDates);\n      return allDates;\n    }\n  }\n};",{"version":3,"sources":["Calendar.vue"],"names":[],"mappings":"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","sourcesContent":["<!--\n/**\n * @fileoverview Calendar component\n * @license MIT\n * @author Rafal Pospiech <neuronet.io@gmail.com>\n * @package GanttElastic\n */\n-->\n<template>\n  <div\n    class=\"gantt-elastic__calendar-wrapper\"\n    :style=\"{ ...root.style['calendar-wrapper'], width: root.state.options.width + 'px' }\"\n  >\n    <div class=\"gantt-elastic__calendar\" :style=\"{ ...root.style['calendar'], width: root.state.options.width + 'px' }\">\n      <calendar-row :items=\"dates.months\" which=\"month\" v-if=\"root.state.options.calendar.month.display\"></calendar-row>\n      <calendar-row :items=\"dates.days\" which=\"day\" v-if=\"root.state.options.calendar.day.display\"></calendar-row>\n      <calendar-row :items=\"dates.hours\" which=\"hour\" v-if=\"root.state.options.calendar.hour.display\"></calendar-row>\n    </div>\n  </div>\n</template>\n\n<script>\nimport dayjs from 'dayjs';\nimport CalendarRow from './CalendarRow.vue';\n\nexport default {\n  name: 'Calendar',\n  components: {\n    CalendarRow\n  },\n  inject: ['root'],\n  data() {\n    return {};\n  },\n\n  methods: {\n    /**\n     * How many hours will fit?\n     *\n     * @returns {object}\n     */\n    howManyHoursFit(dayIndex) {\n      const stroke = 1;\n      const additionalSpace = stroke + 2;\n      let fullCellWidth = this.root.state.options.times.steps[dayIndex].width.px;\n      let formatNames = Object.keys(this.root.state.options.calendar.hour.format);\n      for (let hours = 24; hours > 1; hours = Math.ceil(hours / 2)) {\n        for (let formatName of formatNames) {\n          if (\n            (this.root.state.options.calendar.hour.maxWidths[formatName] + additionalSpace) * hours <= fullCellWidth &&\n            hours > 1\n          ) {\n            return {\n              count: hours,\n              type: formatName\n            };\n          }\n        }\n      }\n      return {\n        count: 0,\n        type: ''\n      };\n    },\n\n    /**\n     * How many days will fit?\n     *\n     * @returns {object}\n     */\n    howManyDaysFit() {\n      const stroke = 1;\n      const additionalSpace = stroke + 2;\n      let fullWidth = this.root.state.options.width;\n      let formatNames = Object.keys(this.root.state.options.calendar.day.format);\n      for (let days = this.root.state.options.times.steps.length; days > 1; days = Math.ceil(days / 2)) {\n        for (let formatName of formatNames) {\n          if (\n            (this.root.state.options.calendar.day.maxWidths[formatName] + additionalSpace) * days <= fullWidth &&\n            days > 1\n          ) {\n            return {\n              count: days,\n              type: formatName\n            };\n          }\n        }\n      }\n      return {\n        count: 0,\n        type: ''\n      };\n    },\n\n    /**\n     * How many months will fit?\n     *\n     * @returns {object}\n     */\n    howManyMonthsFit() {\n      const stroke = 1;\n      const additionalSpace = stroke + 2;\n      let fullWidth = this.root.state.options.width;\n      let formatNames = Object.keys(this.root.state.options.calendar.month.format);\n      let currentMonth = dayjs(this.root.state.options.times.firstTime);\n      let previousMonth = currentMonth.clone();\n      const lastTime = this.root.state.options.times.lastTime;\n      let monthsCount = this.root.monthsCount(\n        this.root.state.options.times.firstTime,\n        this.root.state.options.times.lastTime\n      );\n      if (monthsCount === 1) {\n        for (let formatName of formatNames) {\n          if (this.root.state.options.calendar.month.maxWidths[formatName] + additionalSpace <= fullWidth) {\n            return {\n              count: 1,\n              type: formatName\n            };\n          }\n        }\n      }\n      for (let months = monthsCount; months > 1; months = Math.ceil(months / 2)) {\n        for (let formatName of formatNames) {\n          if (\n            (this.root.state.options.calendar.month.maxWidths[formatName] + additionalSpace) * months <= fullWidth &&\n            months > 1\n          ) {\n            return {\n              count: months,\n              type: formatName\n            };\n          }\n        }\n      }\n      return {\n        count: 0,\n        type: formatNames[0]\n      };\n    },\n\n    /**\n     * Generate hours\n     *\n     * @returns {array}\n     */\n    generateHours() {\n      let allHours = [];\n      if (!this.root.state.options.calendar.hour.display) {\n        return allHours;\n      }\n      const steps = this.root.state.options.times.steps;\n      const localeName = this.root.state.options.locale.name;\n      for (let hourIndex = 0, len = steps.length; hourIndex < len; hourIndex++) {\n        const hoursCount = this.howManyHoursFit(hourIndex);\n        if (hoursCount.count === 0) {\n          continue;\n        }\n        const hours = { key: hourIndex + 'step', children: [] };\n        const hourStep = 24 / hoursCount.count;\n        const hourWidthPx = steps[hourIndex].width.px / hoursCount.count;\n        for (let i = 0, len = hoursCount.count; i < len; i++) {\n          const hour = i * hourStep;\n          let index = hourIndex;\n          if (hourIndex > 0) {\n            index = hourIndex - Math.floor(hourIndex / 24) * 24;\n          }\n          let textWidth = 0;\n          if (typeof this.root.state.options.calendar.hour.widths[index] !== 'undefined') {\n            textWidth = this.root.state.options.calendar.hour.widths[index][hoursCount.type];\n          }\n          let x = steps[hourIndex].offset.px + hourWidthPx * i;\n          hours.children.push({\n            index: hourIndex,\n            key: 'h' + i,\n            x,\n            y: this.root.state.options.calendar.day.height + this.root.state.options.calendar.month.height,\n            width: hourWidthPx,\n            textWidth,\n            height: this.root.state.options.calendar.hour.height,\n            label: this.root.state.options.calendar.hour.formatted[hoursCount.type][hour]\n          });\n        }\n        allHours.push(hours);\n      }\n      return allHours;\n    },\n\n    /**\n     * Generate days\n     *\n     * @returns {array}\n     */\n    generateDays() {\n      let days = [];\n      if (!this.root.state.options.calendar.day.display) {\n        return days;\n      }\n      const daysCount = this.howManyDaysFit();\n      if (daysCount.count === 0) {\n        return days;\n      }\n      const steps = this.root.state.options.times.steps;\n      const localeName = this.root.state.options.locale.name;\n      const dayStep = Math.ceil(steps.length / daysCount.count);\n      for (let dayIndex = 0, len = steps.length; dayIndex < len; dayIndex += dayStep) {\n        let dayWidthPx = 0;\n        // day could be shorter (daylight saving time) so join widths and divide\n        for (let currentStep = 0; currentStep < dayStep; currentStep++) {\n          if (typeof steps[dayIndex + currentStep] !== 'undefined') {\n            dayWidthPx += steps[dayIndex + currentStep].width.px;\n          }\n        }\n        const date = dayjs(steps[dayIndex].time);\n        let textWidth = 0;\n        if (typeof this.root.state.options.calendar.day.widths[dayIndex] !== 'undefined') {\n          textWidth = this.root.state.options.calendar.day.widths[dayIndex][daysCount.type];\n        }\n        let x = steps[dayIndex].offset.px;\n        days.push({\n          index: dayIndex,\n          key: steps[dayIndex].time + 'd',\n          x,\n          y: this.root.state.options.calendar.month.height,\n          width: dayWidthPx,\n          textWidth,\n          height: this.root.state.options.calendar.day.height,\n          label: this.root.state.options.calendar.day.format[daysCount.type](date.locale(localeName))\n        });\n      }\n      return days.map(item => ({\n        key: item.key,\n        children: [item]\n      }));\n    },\n\n    /**\n     * Generate months\n     *\n     * @returns {array}\n     */\n    generateMonths() {\n      let months = [];\n      if (!this.root.state.options.calendar.month.display) {\n        return months;\n      }\n      const monthsCount = this.howManyMonthsFit();\n      if (monthsCount.count === 0) {\n        return months;\n      }\n      const steps = this.root.state.options.times.steps;\n      const localeName = this.root.state.options.locale.name;\n      let formatNames = Object.keys(this.root.state.options.calendar.month.format);\n      let currentDate = dayjs(this.root.state.options.times.firstTime);\n      for (let monthIndex = 0; monthIndex < monthsCount.count; monthIndex++) {\n        let monthWidth = 0;\n        let monthOffset = Number.MAX_SAFE_INTEGER;\n        let finalDate = dayjs(currentDate)\n          .add(1, 'month')\n          .startOf('month');\n        if (finalDate.valueOf() > this.root.state.options.times.lastTime) {\n          finalDate = dayjs(this.root.state.options.times.lastTime);\n        }\n        // we must find first and last step to get the offsets / widths\n        for (let step = 0, len = this.root.state.options.times.steps.length; step < len; step++) {\n          let currentStep = this.root.state.options.times.steps[step];\n          if (currentStep.time >= currentDate.valueOf() && currentStep.time < finalDate.valueOf()) {\n            monthWidth += currentStep.width.px;\n            if (currentStep.offset.px < monthOffset) {\n              monthOffset = currentStep.offset.px;\n            }\n          }\n        }\n        let label = '';\n        let choosenFormatName;\n        for (let formatName of formatNames) {\n          if (this.root.state.options.calendar.month.maxWidths[formatName] + 2 <= monthWidth) {\n            label = this.root.state.options.calendar.month.format[formatName](currentDate.locale(localeName));\n            choosenFormatName = formatName;\n          }\n        }\n        let textWidth = 0;\n        if (typeof this.root.state.options.calendar.month.widths[monthIndex] !== 'undefined') {\n          textWidth = this.root.state.options.calendar.month.widths[monthIndex][choosenFormatName];\n        }\n        let x = monthOffset;\n        months.push({\n          index: monthIndex,\n          key: monthIndex + 'm',\n          x,\n          y: 0,\n          width: monthWidth,\n          textWidth,\n          choosenFormatName,\n          height: this.root.state.options.calendar.month.height,\n          label\n        });\n        currentDate = currentDate.add(1, 'month').startOf('month');\n        if (currentDate.valueOf() > this.root.state.options.times.lastTime) {\n          currentDate = dayjs(this.root.state.options.times.lastTime);\n        }\n      }\n      return months.map(item => ({\n        key: item.key,\n        children: [item]\n      }));\n    },\n\n    /**\n     * Sum all calendar rows height and return result\n     *\n     * @returns {int}\n     */\n    calculateCalendarDimensions({ hours, days, months }) {\n      let height = 0;\n      if (this.root.state.options.calendar.hour.display && hours.length > 0) {\n        height += this.root.state.options.calendar.hour.height;\n      }\n      if (this.root.state.options.calendar.day.display && days.length > 0) {\n        height += this.root.state.options.calendar.day.height;\n      }\n      if (this.root.state.options.calendar.month.display && months.length > 0) {\n        height += this.root.state.options.calendar.month.height;\n      }\n      this.root.state.options.calendar.height = height;\n    }\n  },\n\n  computed: {\n    dates() {\n      const hours = this.generateHours();\n      const days = this.generateDays();\n      const months = this.generateMonths();\n      const allDates = { hours, days, months };\n      this.calculateCalendarDimensions(allDates);\n      return allDates;\n    }\n  }\n};\n</script>\n"],"sourceRoot":"node_modules/gantt-elastic/src/components/Calendar"}]}