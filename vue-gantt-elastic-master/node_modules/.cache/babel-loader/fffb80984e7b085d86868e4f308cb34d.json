{"remainingRequest":"/Users/danieldanio/workspace/daniel-danio-student-code/Capstone/project-schedule-app-final-capstone/vue-gantt-elastic-master/node_modules/babel-loader/lib/index.js!/Users/danieldanio/workspace/daniel-danio-student-code/Capstone/project-schedule-app-final-capstone/vue-gantt-elastic-master/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/danieldanio/workspace/daniel-danio-student-code/Capstone/project-schedule-app-final-capstone/vue-gantt-elastic-master/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/danieldanio/workspace/daniel-danio-student-code/Capstone/project-schedule-app-final-capstone/vue-gantt-elastic-master/node_modules/gantt-elastic/src/components/Chart/Text.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/danieldanio/workspace/daniel-danio-student-code/Capstone/project-schedule-app-final-capstone/vue-gantt-elastic-master/node_modules/gantt-elastic/src/components/Chart/Text.vue","mtime":1664650536313},{"path":"/Users/danieldanio/workspace/daniel-danio-student-code/Capstone/project-schedule-app-final-capstone/vue-gantt-elastic-master/node_modules/cache-loader/dist/cjs.js","mtime":1664650533042},{"path":"/Users/danieldanio/workspace/daniel-danio-student-code/Capstone/project-schedule-app-final-capstone/vue-gantt-elastic-master/node_modules/babel-loader/lib/index.js","mtime":1664650533420},{"path":"/Users/danieldanio/workspace/daniel-danio-student-code/Capstone/project-schedule-app-final-capstone/vue-gantt-elastic-master/node_modules/cache-loader/dist/cjs.js","mtime":1664650533042},{"path":"/Users/danieldanio/workspace/daniel-danio-student-code/Capstone/project-schedule-app-final-capstone/vue-gantt-elastic-master/node_modules/vue-loader/lib/index.js","mtime":1664650526464}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  name: 'ChartText',\n  inject: ['root'],\n  props: ['task'],\n  data: function data() {\n    return {};\n  },\n  computed: {\n    /**\n     * Get width\n     *\n     * @returns {number}\n     */\n    getWidth: function getWidth() {\n      var textStyle = this.root.style['chart-row-text'];\n      this.root.state.ctx.font = \"\".concat(textStyle['font-weight'], \" \").concat(textStyle['font-size'], \" \").concat(textStyle['font-family']);\n      var textWidth = this.root.state.ctx.measureText(this.task.label).width;\n      return textWidth + this.root.state.options.chart.text.xPadding * 2;\n    },\n\n    /**\n     * Get height\n     *\n     * @returns {number}\n     */\n    getHeight: function getHeight() {\n      return this.task.height + this.root.state.options.chart.grid.horizontal.gap * 2;\n    },\n\n    /**\n     * Get content style\n     *\n     * @returns {object}\n     */\n    contentStyle: function contentStyle() {\n      return {\n        height: '100%',\n        'line-height': this.getHeight + 'px'\n      };\n    },\n\n    /**\n     * Should we render text as html?\n     *\n     * @returns {boolean}\n     */\n    html: function html() {\n      var cols = this.root.state.options.taskList.columns;\n\n      for (var i = 0, len = cols.length; i < len; i++) {\n        var col = cols[i];\n\n        if (col.value === 'label' && typeof col.html !== 'undefined' && col.html) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n  }\n};",{"version":3,"sources":["Text.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkDA,eAAA;AACA,EAAA,IAAA,EAAA,WADA;AAEA,EAAA,MAAA,EAAA,CAAA,MAAA,CAFA;AAGA,EAAA,KAAA,EAAA,CAAA,MAAA,CAHA;AAIA,EAAA,IAJA,kBAIA;AACA,WAAA,EAAA;AACA,GANA;AAOA,EAAA,QAAA,EAAA;AACA;;;;;AAKA,IAAA,QANA,sBAMA;AACA,UAAA,SAAA,GAAA,KAAA,IAAA,CAAA,KAAA,CAAA,gBAAA,CAAA;AACA,WAAA,IAAA,CAAA,KAAA,CAAA,GAAA,CAAA,IAAA,aAAA,SAAA,CAAA,aAAA,CAAA,cAAA,SAAA,CAAA,WAAA,CAAA,cAAA,SAAA,CAAA,aAAA,CAAA;AACA,UAAA,SAAA,GAAA,KAAA,IAAA,CAAA,KAAA,CAAA,GAAA,CAAA,WAAA,CAAA,KAAA,IAAA,CAAA,KAAA,EAAA,KAAA;AACA,aAAA,SAAA,GAAA,KAAA,IAAA,CAAA,KAAA,CAAA,OAAA,CAAA,KAAA,CAAA,IAAA,CAAA,QAAA,GAAA,CAAA;AACA,KAXA;;AAaA;;;;;AAKA,IAAA,SAlBA,uBAkBA;AACA,aAAA,KAAA,IAAA,CAAA,MAAA,GAAA,KAAA,IAAA,CAAA,KAAA,CAAA,OAAA,CAAA,KAAA,CAAA,IAAA,CAAA,UAAA,CAAA,GAAA,GAAA,CAAA;AACA,KApBA;;AAsBA;;;;;AAKA,IAAA,YA3BA,0BA2BA;AACA,aAAA;AAAA,QAAA,MAAA,EAAA,MAAA;AAAA,uBAAA,KAAA,SAAA,GAAA;AAAA,OAAA;AACA,KA7BA;;AA+BA;;;;;AAKA,IAAA,IApCA,kBAoCA;AACA,UAAA,IAAA,GAAA,KAAA,IAAA,CAAA,KAAA,CAAA,OAAA,CAAA,QAAA,CAAA,OAAA;;AACA,WAAA,IAAA,CAAA,GAAA,CAAA,EAAA,GAAA,GAAA,IAAA,CAAA,MAAA,EAAA,CAAA,GAAA,GAAA,EAAA,CAAA,EAAA,EAAA;AACA,YAAA,GAAA,GAAA,IAAA,CAAA,CAAA,CAAA;;AACA,YAAA,GAAA,CAAA,KAAA,KAAA,OAAA,IAAA,OAAA,GAAA,CAAA,IAAA,KAAA,WAAA,IAAA,GAAA,CAAA,IAAA,EAAA;AACA,iBAAA,IAAA;AACA;AACA;;AACA,aAAA,KAAA;AACA;AA7CA;AAPA,CAAA","sourcesContent":["<!--\n/**\n * @fileoverview Text component\n * @license MIT\n * @author Rafal Pospiech <neuronet.io@gmail.com>\n * @package GanttElastic\n */\n-->\n<template>\n  <svg\n    class=\"gantt-elastic__chart-row-text-wrapper\"\n    :style=\"{ ...root.style['chart-row-text-wrapper'] }\"\n    :x=\"task.x + task.width + root.state.options.chart.text.offset\"\n    :y=\"task.y - root.state.options.chart.grid.horizontal.gap\"\n    :width=\"getWidth\"\n    :height=\"getHeight\"\n  >\n    <foreignObject x=\"0\" y=\"0\" width=\"100%\" :height=\"getHeight\">\n      <div\n        xmlns=\"http://www.w3.org/1999/xhtml\"\n        class=\"gantt-elastic__chart-row-text\"\n        :style=\"{ ...root.style['chart-row-text'] }\"\n      >\n        <div\n          class=\"gantt-elastic__chart-row-text-content gantt-elastic__chart-row-text-content--text\"\n          :style=\"{\n            ...root.style['chart-row-text-content'],\n            ...root.style['chart-row-text-content--text'],\n            ...contentStyle\n          }\"\n          v-if=\"!html\"\n        >\n          <div>{{ task.label }}</div>\n        </div>\n        <div\n          class=\"gantt-elastic__chart-row-text-content gantt-elastic__chart-row-text-content--html\"\n          :style=\"{\n            ...root.style['chart-row-text-content'],\n            ...root.style['chart-row-text-content--html'],\n            ...contentStyle\n          }\"\n          v-if=\"html\"\n          v-html=\"task.label\"\n        ></div>\n      </div>\n    </foreignObject>\n  </svg>\n</template>\n\n<script>\nexport default {\n  name: 'ChartText',\n  inject: ['root'],\n  props: ['task'],\n  data() {\n    return {};\n  },\n  computed: {\n    /**\n     * Get width\n     *\n     * @returns {number}\n     */\n    getWidth() {\n      const textStyle = this.root.style['chart-row-text'];\n      this.root.state.ctx.font = `${textStyle['font-weight']} ${textStyle['font-size']} ${textStyle['font-family']}`;\n      const textWidth = this.root.state.ctx.measureText(this.task.label).width;\n      return textWidth + this.root.state.options.chart.text.xPadding * 2;\n    },\n\n    /**\n     * Get height\n     *\n     * @returns {number}\n     */\n    getHeight() {\n      return this.task.height + this.root.state.options.chart.grid.horizontal.gap * 2;\n    },\n\n    /**\n     * Get content style\n     *\n     * @returns {object}\n     */\n    contentStyle() {\n      return { height: '100%', 'line-height': this.getHeight + 'px' };\n    },\n\n    /**\n     * Should we render text as html?\n     *\n     * @returns {boolean}\n     */\n    html() {\n      const cols = this.root.state.options.taskList.columns;\n      for (let i = 0, len = cols.length; i < len; i++) {\n        const col = cols[i];\n        if (col.value === 'label' && typeof col.html !== 'undefined' && col.html) {\n          return true;\n        }\n      }\n      return false;\n    }\n  }\n};\n</script>\n"],"sourceRoot":"node_modules/gantt-elastic/src/components/Chart"}]}