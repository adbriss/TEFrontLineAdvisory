{"remainingRequest":"/Users/danieldanio/workspace/daniel-danio-student-code/Capstone/project-schedule-app-final-capstone/vue-gantt-elastic-master/node_modules/babel-loader/lib/index.js!/Users/danieldanio/workspace/daniel-danio-student-code/Capstone/project-schedule-app-final-capstone/vue-gantt-elastic-master/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/danieldanio/workspace/daniel-danio-student-code/Capstone/project-schedule-app-final-capstone/vue-gantt-elastic-master/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/danieldanio/workspace/daniel-danio-student-code/Capstone/project-schedule-app-final-capstone/vue-gantt-elastic-master/node_modules/gantt-elastic/src/components/Chart/Grid.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/danieldanio/workspace/daniel-danio-student-code/Capstone/project-schedule-app-final-capstone/vue-gantt-elastic-master/node_modules/gantt-elastic/src/components/Chart/Grid.vue","mtime":1664650536313},{"path":"/Users/danieldanio/workspace/daniel-danio-student-code/Capstone/project-schedule-app-final-capstone/vue-gantt-elastic-master/node_modules/cache-loader/dist/cjs.js","mtime":1664650533042},{"path":"/Users/danieldanio/workspace/daniel-danio-student-code/Capstone/project-schedule-app-final-capstone/vue-gantt-elastic-master/node_modules/babel-loader/lib/index.js","mtime":1664650533420},{"path":"/Users/danieldanio/workspace/daniel-danio-student-code/Capstone/project-schedule-app-final-capstone/vue-gantt-elastic-master/node_modules/cache-loader/dist/cjs.js","mtime":1664650533042},{"path":"/Users/danieldanio/workspace/daniel-danio-student-code/Capstone/project-schedule-app-final-capstone/vue-gantt-elastic-master/node_modules/vue-loader/lib/index.js","mtime":1664650526464}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  name: 'Grid',\n  inject: ['root'],\n  data: function data() {\n    return {};\n  },\n\n  /**\n   * Created\n   */\n  created: function created() {\n    this.root.$on('recenterPosition', this.recenterPosition);\n  },\n\n  /**\n   * Mounted\n   */\n  mounted: function mounted() {\n    var _this = this;\n\n    this.$nextTick(function () {\n      _this.$nextTick(function () {\n        // because of stupid slider :/\n        _this.root.scrollToTime(_this.timeLinePosition.time);\n      });\n    });\n  },\n  methods: {\n    /**\n     * Recenter position - go to current time line\n     */\n    recenterPosition: function recenterPosition() {\n      this.root.scrollToTime(this.timeLinePosition.time);\n    }\n  },\n  computed: {\n    /**\n     * Generate vertical lines of the grid\n     *\n     * @returns {array}\n     */\n    verticalLines: function verticalLines() {\n      var _this2 = this;\n\n      var lines = [];\n      var state = this.root.state;\n      state.options.times.steps.forEach(function (step) {\n        if (_this2.root.isInsideViewPort(step.offset.px, 1)) {\n          lines.push({\n            key: step.time,\n            x1: step.offset.px,\n            y1: 0,\n            x2: step.offset.px,\n            y2: state.tasks.length * (state.options.row.height + state.options.chart.grid.horizontal.gap * 2) + _this2.root.style['grid-line-vertical']['stroke-width']\n          });\n        }\n      });\n      return lines;\n    },\n\n    /**\n     * Generate horizontal lines of the grid\n     *\n     * @returns {array}\n     */\n    horizontalLines: function horizontalLines() {\n      var lines = [];\n      var state = this.root.state.options;\n      var tasks = this.root.visibleTasks;\n\n      for (var index = 0, len = tasks.length; index <= len; index++) {\n        var y = index * (state.row.height + state.chart.grid.horizontal.gap * 2) + this.root.style['grid-line-vertical']['stroke-width'] / 2;\n        lines.push({\n          key: 'hl' + index,\n          x1: 0,\n          y1: y,\n          x2: '100%',\n          y2: y\n        });\n      }\n\n      return lines;\n    },\n\n    /**\n     * Check if specified line is inside viewport (visible)\n     *\n     * @returns {function}\n     */\n    inViewPort: function inViewPort() {\n      var _this3 = this;\n\n      return function (line) {\n        var state = _this3.root.state.options;\n        return line.x1 >= state.scroll.chart.left && line.x1 <= state.scroll.chart.right;\n      };\n    },\n\n    /**\n     * Get current time line position\n     *\n     * @returns {object}\n     */\n    timeLinePosition: function timeLinePosition() {\n      var d = new Date();\n      var current = d.getTime();\n      var currentOffset = this.root.timeToPixelOffsetX(current);\n      var timeLine = {\n        x: 0,\n        y1: 0,\n        y2: '100%',\n        dateTime: '',\n        time: current\n      };\n      timeLine.x = currentOffset;\n      timeLine.dateTime = d.toLocaleDateString();\n      return timeLine;\n    }\n  }\n};",{"version":3,"sources":["Grid.vue"],"names":[],"mappings":"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","sourcesContent":["<!--\n/**\n * @fileoverview Grid component\n * @license MIT\n * @author Rafal Pospiech <neuronet.io@gmail.com>\n * @package GanttElastic\n */\n-->\n<template>\n  <svg\n    class=\"gantt-elastic__grid-lines-wrapper\"\n    :style=\"{ ...root.style['grid-lines-wrapper'] }\"\n    ref=\"chart\"\n    x=\"0\"\n    y=\"0\"\n    :width=\"root.state.options.width\"\n    :height=\"root.state.options.allVisibleTasksHeight\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <g class=\"gantt-elastic__grid-lines\" :style=\"{ ...root.style['grid-lines'] }\">\n      <line\n        class=\"gantt-elastic__grid-line-horizontal\"\n        :style=\"{ ...root.style['grid-line-horizontal'] }\"\n        v-for=\"line in horizontalLines\"\n        :key=\"line.key\"\n        :x1=\"line.x1\"\n        :y1=\"line.y1\"\n        :x2=\"line.x2\"\n        :y2=\"line.y2\"\n      ></line>\n      <line\n        class=\"gantt-elastic__grid-line-vertical\"\n        :style=\"{ ...root.style['grid-line-vertical'] }\"\n        v-for=\"line in verticalLines\"\n        :key=\"line.key\"\n        :x1=\"line.x1\"\n        :y1=\"line.y1\"\n        :x2=\"line.x2\"\n        :y2=\"line.y2\"\n      ></line>\n      <line\n        class=\"gantt-elastic__grid-line-time\"\n        :style=\"{ ...root.style['grid-line-time'] }\"\n        :x1=\"timeLinePosition.x\"\n        :y1=\"timeLinePosition.y1\"\n        :x2=\"timeLinePosition.x\"\n        :y2=\"timeLinePosition.y2\"\n      ></line>\n    </g>\n  </svg>\n</template>\n\n<script>\nexport default {\n  name: 'Grid',\n  inject: ['root'],\n  data() {\n    return {};\n  },\n  /**\n   * Created\n   */\n  created() {\n    this.root.$on('recenterPosition', this.recenterPosition);\n  },\n\n  /**\n   * Mounted\n   */\n  mounted() {\n    this.$nextTick(() => {\n      this.$nextTick(() => {\n        // because of stupid slider :/\n        this.root.scrollToTime(this.timeLinePosition.time);\n      });\n    });\n  },\n\n  methods: {\n    /**\n     * Recenter position - go to current time line\n     */\n    recenterPosition() {\n      this.root.scrollToTime(this.timeLinePosition.time);\n    }\n  },\n\n  computed: {\n    /**\n     * Generate vertical lines of the grid\n     *\n     * @returns {array}\n     */\n    verticalLines() {\n      let lines = [];\n      const state = this.root.state;\n      state.options.times.steps.forEach(step => {\n        if (this.root.isInsideViewPort(step.offset.px, 1)) {\n          lines.push({\n            key: step.time,\n            x1: step.offset.px,\n            y1: 0,\n            x2: step.offset.px,\n            y2:\n              state.tasks.length * (state.options.row.height + state.options.chart.grid.horizontal.gap * 2) +\n              this.root.style['grid-line-vertical']['stroke-width']\n          });\n        }\n      });\n      return lines;\n    },\n\n    /**\n     * Generate horizontal lines of the grid\n     *\n     * @returns {array}\n     */\n    horizontalLines() {\n      let lines = [];\n      const state = this.root.state.options;\n      let tasks = this.root.visibleTasks;\n      for (let index = 0, len = tasks.length; index <= len; index++) {\n        const y =\n          index * (state.row.height + state.chart.grid.horizontal.gap * 2) +\n          this.root.style['grid-line-vertical']['stroke-width'] / 2;\n        lines.push({\n          key: 'hl' + index,\n          x1: 0,\n          y1: y,\n          x2: '100%',\n          y2: y\n        });\n      }\n      return lines;\n    },\n\n    /**\n     * Check if specified line is inside viewport (visible)\n     *\n     * @returns {function}\n     */\n    inViewPort() {\n      return line => {\n        const state = this.root.state.options;\n        return line.x1 >= state.scroll.chart.left && line.x1 <= state.scroll.chart.right;\n      };\n    },\n\n    /**\n     * Get current time line position\n     *\n     * @returns {object}\n     */\n    timeLinePosition() {\n      const d = new Date();\n      const current = d.getTime();\n      const currentOffset = this.root.timeToPixelOffsetX(current);\n      const timeLine = {\n        x: 0,\n        y1: 0,\n        y2: '100%',\n        dateTime: '',\n        time: current\n      };\n      timeLine.x = currentOffset;\n      timeLine.dateTime = d.toLocaleDateString();\n      return timeLine;\n    }\n  }\n};\n</script>\n"],"sourceRoot":"node_modules/gantt-elastic/src/components/Chart"}]}